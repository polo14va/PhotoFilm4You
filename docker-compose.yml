version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    platform: linux/amd64
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - mynetwork
  
  kafka:
    image: confluentinc/cp-kafka:latest
    platform: linux/amd64
    depends_on:
      - zookeeper
    ports:
      - 29092:9092
      - 19092:19092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092, CONNECTIONS_FROM_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - mynetwork
  
  productdb:
    image: postgres
    platform: linux/amd64
    restart: always
    ports:
      - 54320:5432
    environment:
      POSTGRES_USER: product
      POSTGRES_PASSWORD: product
    networks:
      - mynetwork
      
  userdb:
    image: postgres
    platform: linux/amd64
    restart: always
    ports:
      - 54321:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
    networks:
      - mynetwork


  web:
      image: nginx
      platform: linux/amd64
      restart: always
      volumes:
        - ./web-photofilm/static:/usr/share/nginx/html
        - ./web-photofilm/default.conf:/etc/nginx/conf.d/default.conf
      ports:
        - 80:80
      networks:
        - mynetwork

  productws:
    image: productws
    platform: linux/amd64
    restart: always
    build:
      context: ./WebService/productcatalog
      dockerfile: Dockerfile
    ports:
      - 18081:18081
    depends_on:
      - productdb
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://productdb:5432/product
      SPRING_DATASOURCE_USERNAME: product
      SPRING_DATASOURCE_PASSWORD: product
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      USER_ORDERS_GETRESERVEDQTY_URL: http://userws:18082/orders/stockReservedByProduct/{productId}
    networks:
      - mynetwork

  userws:
    image: userws
    platform: linux/amd64
    restart: always
    build:
      context: ./WebService/user
      dockerfile: Dockerfile
    ports:
      - 18082:18082
    depends_on:
      - userdb
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://userdb:5432/user
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: user
      JWT_SECRET: OS+Tv3RLQhNJYDd4QWhjha8XFkaXpQCFvNyMpLA1lno
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PRODUCTCATALOG_GETPRODUCTDETAILS_URL: http://productws:18081/products/{productId}
      PRODUCTCATALOG_GETAVAILABLEPRODUCTQUANTITY_URL: http://productws:18081/items/itemsByProduct/{productId}
      USERSERVICE_CHANGEPASSWORD_URL: http://localhost:80/user/change-password?TEMPCODE=%s
      USERSERVICE_CONFRIMIDURL_MAIL: http://localhost:18082/auth/confirm?id=%s
    networks:
      - mynetwork

  notificationws:
    image: notificationws
    platform: linux/amd64
    restart: always
    build:
      context: ./WebService/notification
      dockerfile: Dockerfile
    ports:
      - 18083:18083
    depends_on:
      - productdb
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://userdb:5432/user
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: user
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_MAIL_USERNAME: pds.g5.uoc@gmail.com
      SPRING_MAIL_PASSWORD: paih dtoq fnrc gxhi
      USERSERVICE_GETUSERSTOALERT_URL: http://userws:18082/users/toAlert?productId=
      PRODUCTSERVICE_GETPRODUCTDETAILS_URL: http://productws:18081/products/
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge